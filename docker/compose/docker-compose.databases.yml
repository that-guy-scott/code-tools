# Enhanced Database Stack - PostgreSQL, Redis, Qdrant, Neo4j
version: '3.8'

services:
  # PostgreSQL Database with Enhanced Configuration
  postgres:
    image: postgres:16-alpine
    container_name: code-tools-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: codetools_dev
      POSTGRES_USER: codetools
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - postgres_backups:/backups
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=off
    networks:
      - databases-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codetools -d codetools_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis with Production Configuration
  redis:
    image: redis:7-alpine
    container_name: code-tools-redis
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis-production.conf:/etc/redis/redis.conf
      - redis_backups:/backups
    networks:
      - databases-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    sysctls:
      - net.core.somaxconn=65535

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: code-tools-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    expose:
      - 6333
      - 6334
      - 6335
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant/production.yaml:/qdrant/config/production.yaml
      - qdrant_backups:/backups
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
    networks:
      - databases-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 sh -c 'cat < /dev/null > /dev/tcp/localhost/6333' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: code-tools-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP web interface
      - "7687:7687"  # Bolt protocol
    expose:
      - 7474
      - 7687
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - neo4j_backups:/backups
    environment:
      NEO4J_AUTH: neo4j/dev_password_123
      NEO4J_PLUGINS: '["apoc","graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 512m
    networks:
      - databases-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "dev_password_123", "MATCH () RETURN count(*) as count"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # MCP Neo4j Memory Server for Knowledge Graph
  mcp-neo4j-memory:
    image: node:18-alpine
    container_name: code-tools-mcp-neo4j-memory
    restart: unless-stopped
    working_dir: /app
    ports:
      - "8083:8080"  # HTTP MCP server
    volumes:
      - ./mcp-neo4j:/app
      - neo4j_mcp_data:/data
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: dev_password_123
      MCP_TRANSPORT: http
      MCP_HOST: 0.0.0.0
      MCP_PORT: 8080
    networks:
      - databases-network
    depends_on:
      neo4j:
        condition: service_healthy
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          npm init -y &&
          npm install @neo4j-contrib/mcp-neo4j-memory @neo4j-contrib/mcp-neo4j-cypher
        fi &&
        npx mcp-neo4j-memory --transport http --host 0.0.0.0 --port 8080
      "
    profiles:
      - mcp

  # MCP Neo4j Cypher Server for Natural Language Queries
  mcp-neo4j-cypher:
    image: node:18-alpine
    container_name: code-tools-mcp-neo4j-cypher
    restart: unless-stopped
    working_dir: /app
    ports:
      - "8084:8080"  # HTTP MCP server
    volumes:
      - ./mcp-neo4j:/app
      - neo4j_mcp_data:/data
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: dev_password_123
      MCP_TRANSPORT: http
      MCP_HOST: 0.0.0.0
      MCP_PORT: 8080
    networks:
      - databases-network
    depends_on:
      neo4j:
        condition: service_healthy
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          npm init -y &&
          npm install @neo4j-contrib/mcp-neo4j-memory @neo4j-contrib/mcp-neo4j-cypher
        fi &&
        npx mcp-neo4j-cypher --transport http --host 0.0.0.0 --port 8080
      "
    profiles:
      - mcp

  # Database Administration Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: code-tools-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@codetools.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - databases-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - admin

  # Redis Management UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: code-tools-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    networks:
      - databases-network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - admin

  # Qdrant Web UI (built into Qdrant, exposed via nginx for security)
  qdrant-proxy:
    image: nginx:alpine
    container_name: code-tools-qdrant-proxy
    restart: unless-stopped
    ports:
      - "8082:80"
    volumes:
      - ./config/nginx/qdrant-proxy.conf:/etc/nginx/conf.d/default.conf
    networks:
      - databases-network
    depends_on:
      qdrant:
        condition: service_healthy
    profiles:
      - admin

  # Database Backup Service
  db-backup:
    image: alpine:latest
    container_name: code-tools-db-backup
    restart: "no"
    volumes:
      - postgres_backups:/postgres-backups
      - redis_backups:/redis-backups
      - qdrant_backups:/qdrant-backups
      - neo4j_backups:/neo4j-backups
      - ./scripts:/scripts
    networks:
      - databases-network
    command: /scripts/backup-all-databases.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/qdrant
  pgadmin_data:
    driver: local
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backups/postgres
  redis_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backups/redis
  qdrant_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backups/qdrant
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j/logs
  neo4j_import:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j/import
  neo4j_plugins:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j/plugins
  neo4j_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backups/neo4j
  neo4j_mcp_data:
    driver: local

networks:
  databases-network:
    driver: bridge
    name: code-tools-databases
    ipam:
      config:
        - subnet: 172.20.0.0/16